[remote_test_server]
# Replace placeholder values with your actual remote server details for testing
host = your_server_ip_or_hostname
user = your_username
password = your_password
# ssh_key_path = /path/to/your/ssh/key # Uncomment and use if you prefer key-based authentication

[test_files]
# Define paths for local and remote files to be used in tests
# Ensure these files/paths are appropriate and writable/readable in your test environment

# Base directory for remote test files
remote_dir_for_tests = /tmp/nautodog_integration_tests

# Content for test files
test_content = This is test content for integration tests.
original_backup_content = Original content for backup test.
new_upload_content = New uploaded content.

# File to be created locally and uploaded to the remote server
local_test_file_to_upload = tests/local_test_upload.txt # This can remain as a pre-existing local file

# Remote path where the local_test_file_to_upload will be placed (for simple upload test)
remote_path_for_upload = %(remote_dir_for_tests)s/upload_here.txt

# An existing file on the remote server that tests will attempt to download
# Ensure this file exists on the remote server before running download tests (test will create it)
remote_test_file_to_download = %(remote_dir_for_tests)s/download_me.txt
# Local path where the remote_test_file_to_download will be saved (pytest's tmp_path will be used)
local_path_for_download = local_downloaded_file.txt # Filename for tmp_path

# For upload tests that involve backing up an existing remote file:
# This file should exist on the remote server before an upload test that checks backup functionality. (test will create it)
existing_remote_file_for_backup = %(remote_dir_for_tests)s/file_to_backup_and_replace.txt
